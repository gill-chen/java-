import java.util.ArrayList;
import java.util.Hashtable;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;

public class SongWriter
{
    private Hashtable<Integer,String> pitchToNote;
    // The constructor of this class
    public SongWriter()
    {
        this.initPitchToNoteDictionary();
    }
    
    // This initialises the pitchToNote dictionary,
    // which will be used by you to convert pitch numbers
    // to note letters
    public void initPitchToNoteDictionary(){
        pitchToNote  = new Hashtable<Integer, String>();
        pitchToNote.put(60, "C");
        pitchToNote.put(61, "C#");
        pitchToNote.put(62, "D");
        pitchToNote.put(63, "D#");
        pitchToNote.put(64, "E");
        pitchToNote.put(65, "F");
        pitchToNote.put(66, "F#");
        pitchToNote.put(67, "G");
        pitchToNote.put(68, "G#");
        pitchToNote.put(69, "A");
        pitchToNote.put(70, "A#");
        pitchToNote.put(71, "B");
    }

    // This method converts a single MidiNote to its notestring representation
    public String noteToString(MidiNote note)
    {
        String result = "";
        String pitch; 
        String duration; 
        if (!(note.isSilent()))
        {
          duration = Integer.toString(note.getDuration());
          pitch = pitchToNote.get(note.getPitch());
          result = duration+pitch;
          System.out.println(result); 
          return result;
        }
        else
        {
          duration = Integer.toString(note.getDuration());
          pitch = "P";
          result = duration+pitch;
          System.out.println(result);
          return result;
        }
    }

    // This method converts a MidiTrack to its notestring representation.
    // You should use the noteToString method here
    public String trackToString(MidiTrack track)
    {
        ArrayList<MidiNote> notes = track.getNotes();
        String result = "";
        int previous_octave = 0;
        MidiNote current_note;
        
        for (int x = 0; x < notes.size(); x++)
        {
          MidiNote current = notes.get(x); 
          if (current.getOctave() == previous_octave)
          {
            result += noteToString(current); 
          }
          else if (current.getOctave() < previous_octave)
          {
            String octaveString = "<";
            for (int i = 0; i <= ((previous_octave)-(current.getOctave())); i++)
            {
            result += octaveString; 
            }
            previous_octave = current.getOctave(); 
            result += noteToString(current); 
          }
          else if (current.getOctave() > previous_octave)
          {
            String octaveString = ">";
            for (int i = 0; i <= ((current.getOctave())-(previous_octave)); i++)
            {
            result += octaveString; 
            }
            previous_octave = current.getOctave(); 
            result += noteToString(current); 
          }
        }
        System.out.println(result); 
        return result;
    }

    // TODO Q4.c.
    // Implement the void writeToFile( Song s1 , String file_path) method
    // This method writes the properties of the Song s1 object
    // and writes them into a file in the location specified by 
    // file_path. This file should have the same format as the sample
    // files in the 'data/' folder.
    public void writeToFile (Song s1, String file_path) throws IOException 
    {
      FileWriter file = new FileWriter(file_path + s1.getName() + "_reverse.txt"); 
      BufferedWriter writer = new BufferedWriter(file);
         
      writer.write("bpm" + " " + "=" + " " +Integer.toString(s1.getBPM()));
      writer.write("name" + " " + "=" + " " +s1.getName());
      if (s1.getSoundbank() == "")
      {
      }
      else 
      {
         writer.write("soundbank" + " " + "=" + " " +s1.getSoundbank());
      }
      for (int x = 0; x < s1.getTracks().size(); x++)
      {
        String instrumentName = Integer.toString(s1.getTracks().get(x).getInstrumentId());
        writer.write("instrument" + " " + "=" + " " + instrumentName);
        String track = trackToString(s1.getTracks().get(x)); 
        writer.write("track" + " " + "=" + " " + track);
      }      
      writer.close(); 
    }

    public static void main( String[] args)
    {
      Song reverse = new Song(); 
      String fileName_Here = "./data/07.txt"; 
      Song test = new Song();
      try 
        {
          reverse.loadFromFile(fileName_Here);
          test.loadFromFile(fileName_Here); 

        }
        catch (IOException e)
        {
          System.out.println("The file "+ fileName_Here + " was not found."); 
        }
        reverse.revert();
        try
        {
          SongWriter reverseSong = new SongWriter(); 
          reverseSong.writeToFile(test, "./data/"); 
        }
        catch (IOException e)
        {
          System.out.println("The file location was not found."); 
        }
  
        // TODO: Q4.d.
        // Create a Song object
   

        // Load text file using the given song_filename, remember to 
        // catch the appropriate Exceptions, print meaningful messages!
        // e.g. if the file was not found, print "The file FILENAME_HERE was not found"

        // call the revert method of the song object.
        
        // Create a SongWriter object here, and call its writeToFile( Song s, String file_location) method.

    }
}